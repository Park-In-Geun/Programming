
public class LinkedList {
	
	private ListNode head; 
	//LinkedList클래스 내에서 사용하도록 head를 ListNode타입의 변수로 선언합니다.
	private ListNode p;
	//LinkedList클래스 내에서 사용하도록 p를 ListNode타입의 변수로 선언합니다.
	
	public void addLastNode(Object data){ //ListNode에 data를 삽입하기 위한 함수입니다.
		ListNode newNode = new ListNode();
		//ListNode 타입의 newNode를 생성하고 하고 하나의 새로운 ListNode로 초기화 해 줍니다.
		
		newNode.setData(data); //newNode의 매개변수 data부분에 입력된 data를 넣어줍니다.
		newNode.setLink(null); //newNode의 link부분에 null값을 넣어줍니다.
		
		if(head == null){ //head의 값이 null값과 같은지 확인하는 조건문입니다.
			head = newNode; //head에 newNode의 값(data,link)을 넣어줍니다.
			return; //void 형이므로 아무것도 반환하지 않습니다.
		}
		
		p = head; //p에다가 head값을 넣어줍니다.
		
		while(p.getLink() != null){ //p의 link의 값이 null일 때 까지 반복하는 반복문입니다.
			p = p.getLink(); //p에다가 p의 link(다음 주소)를 넣어줍니다.
		}
		p.setLink(newNode); //p의 link부분에 newNode를 넣어줍니다(노드의 연결).
	}

	public void deleteLastNode(){ //ListNode의 노드를 삭제하기 위한 함수입니다.
		
		ListNode del = new ListNode();
		//ListNode 타입의 del을 생성하고 하고 하나의 새로운 ListNode로 초기화 해 줍니다.
		ListNode last = new ListNode();
		//ListNode 타입의 last를 생성하고 하고 하나의 새로운 ListNode로 초기화 해 줍니다.
		
		del = head; //del에 head값을 넣어줍니다.
		last = del.getLink(); //last에 head값이 들어있는 del의 link부분에 연결해 줍니다.
		if(head.getLink() == null){
		//
		
			head = null;
			return;
		}
		else
		{
			while(last.getLink() != null)
			{
				del = last;
				last  = last.getLink();
				
			}
		}
		del.setLink(null);
	
	}
	
	public boolean nodeSearch(Object data){
		ListNode search = new ListNode();
		search = head;
		
		while(search != null){
			if(search.getData() == data) return true;
			search = search.getLink();
		}
		return false;
	}
	
	public void print(){
		
		if(head == null){
			System.out.println("===List is Empty===");
		}
		else{
			p = head;
			
			System.out.println("====List Data====");
			
			while(p != null){
			System.out.println("| data : " + p.getData() + "|");
			p = p.getLink();
			
			if(p == null){
				System.out.println("==================");
			}
			}
			}
	}
}
