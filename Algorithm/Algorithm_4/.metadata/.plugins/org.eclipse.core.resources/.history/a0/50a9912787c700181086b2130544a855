
public class BSTree {

	private BSTNode root;
	
	public BSTNode search(int key){
		BSTNode p;
		p = root;
		while(p != null){
			if(p.getKey() > key){
				p = p.getLeft();
			}
			else if(p.getKey() == key){
				return p;
			}
			else p = p.getRight();
		}
		return p;
	}
	
	public void insert(int key){
		BSTNode p,q=null;
		
		p = root;
		while(p != null){
			if(key == p.getKey()) return;
			q = p;
			if(key < p.getKey()){
				p = p.getLeft();
			}
			else{
				p = p.getRight();
			}
		}
		BSTNode newNode = new BSTNode();
		newNode.setKey(key);
		newNode.setRight(null);
		newNode.setLeft(null);
		if(root == null){ root = newNode;}
		else if(key < q.getKey()){q.setLeft(newNode);;}
		else
			q.setRight(newNode);
		return;
	}
	
	public void delete(int key){
		BSTNode parent=root;
		BSTNode	p=root;
		boolean isLeftChild = false;
		
		while(p.getKey() != key){
			parent = p;
			if (p.getKey() > key){
				isLeftChild = true;
				p = p.getLeft();
			}
			else{
				isLeftChild = false;
				p = p.getRight();
			}
			if (p == null)
				return;
		}
		
		if((p.getLeft() == null) && (p.getRight() == null)){
			if(parent.getLeft() == p) parent.setLeft(null);
			else parent.setRight(null);
		}
		else if((p.getRight() == null) || p.getLeft() == null){
			if(p.getRight() != null){
				if(parent.getRight() == p) parent.setRight(p.getRight());
				else parent.setLeft(p.getRight());
			}
			else if (p.getLeft() == null){
				if(parent.getLeft() == p) parent.setLeft(p.getLeft());
				else parent.setRight(p.getLeft());
			}
		}
		else if(p.getLeft() != null && p.getRight() !=null){
			BSTNode q = minNode(p.getRight());
			p.setKey(q.getKey());
			
		}
	}
	
	private BSTNode minNode(BSTNode deleleBSTNode){
		
		BSTNode min = null;
		BSTNode minParent = null;
		BSTNode q = deleleBSTNode.getRight();
		while(q != null){
			minParent = min;
			min = q;
			q = q.getLeft();
		}
		if (min != deleleBSTNode.getRight()){
			minParent.setLeft(min.getRight());
			min.setRight(deleleBSTNode.getRight());
		}
		return min;
	}
	
	public void print(){
		printBST(root);
		System.out.println();
	}
	
	private void printBST(BSTNode root){
		if (root != null){
			System.out.print("<");
			printBST(root.getLeft());
			System.out.print(root.getKey());
			printBST(root.getRight());
			System.out.print(">");
		}
	}
}
