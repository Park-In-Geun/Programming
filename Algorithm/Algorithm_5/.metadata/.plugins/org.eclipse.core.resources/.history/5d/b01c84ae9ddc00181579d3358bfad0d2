
public class Heap {
	
	private int numOfNode;
	private int heap[];
	
	public Heap(int size){
		numOfNode = 0;
		heap = new int[20];
	}
	
	private void heapFull(){
		int temp[] = new int[50];
		for(int i = 0 ; i <= heap.length ; i++){
			temp[i] = heap[i];
		}
		heap = temp;
	}
	
	public void insert(int key)
	{
		int i = ++numOfNode;
		
		while((i != 1) && (key > heap[i/2])){
			heap[i] = heap[i/2];
			i /= 2;
		}
		heap[i] = key;
	}
	public int delete(){
		int item,temp;
		int i = 1, j = 2;
		item = heap[1];
		temp = heap[numOfNode];
		numOfNode -= 1;
		while(j <= numOfNode){
			if(j < numOfNode){
				if(heap[j] < heap[j+1])
					j += 1;
			}
			if(temp >= heap[j]) break;
			heap[i] = heap[j];
			i = j;
			j = j*2;
		}
		heap[i] = temp;
		return item;
	}
	public void makeTreeHeap(){
		int i , p, j, temp;
		for(i = numOfNode ; i >= 1 ; i --){
			p = i;
			for(j = 2*p; j<= numOfNode; j = 2*j){
				if(j < numOfNode)
					if(heap[j] < heap[j+1])
						j += 1;
				if(heap[p] >= heap[j]) break;
				temp = heap[p];
				heap[p] = heap[j];
				heap[j] = temp;
				p = j;
			}
		}
	}
	
	public void testInsert(int key)
	{
		if((heap.length -1) == numOfNode)
			heapFull();
		heap[++numOfNode] = key;
	}
	
	public void print()
	{
		System.out.print("Heap Data : ");
		for(int i = 1 ; i <= numOfNode; i++)
			System.out.printf("| %2d |",heap[i]);
		System.out.println("\n");
			
	}
}
