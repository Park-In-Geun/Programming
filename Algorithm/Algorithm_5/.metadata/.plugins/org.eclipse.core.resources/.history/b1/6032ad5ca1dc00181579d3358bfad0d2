
public class Heap { // Heap 클래스 입니다.
	
	private int numOfNode; // Heap 클래스 내에서만 사용가능한 정수형 변수 numOfNode 입니다.
	private int heap[]; // Heap 클래스 내에서만 사용가능한 정수형 배열 변수 heap 입니다.
	
	public Heap(int size){ // 히프의 크기를 결정하는 Heap 메서드입니다. 매개변수로 정수형 변수 size를 받습니다.
		numOfNode = 0; // numOfNode 값에 0 을 넣어줍니다.
		heap = new int[20]; // heap 배열의 크기를 20으로 지정합니다.
	}
	
	private void heapFull(){ // Heap 클래스 내에서만 사용가능한 heapFull 메서드로 히프의 크기를 증가시켜 줍니다.
		int temp[] = new int[50]; // 정수형 배열 변수 temp를 선언해주고 크기를 50으로 지정합니다. 
		for(int i = 0 ; i <= heap.length ; i++){ // 배열의 크기를 증가시켜 주기 위해 사용하는 반복문입니다.
			temp[i] = heap[i]; //temp 의 i 번째 항에 heap 의 i 번째 항을 넣어줍니다. (배열 복사)
		}
		heap = temp; // heap 에 temp 를 넣어 배열 크기를 증가키셔 줍니다.
	}
	
	public void insert(int key) // 히프에 값을 삽입하는 메서드입니다. 매개변수로 정수형 변수 key를 받습니다.
	{
		int i = ++numOfNode; // 정수형 변수 i 를 선언하고 numOfNode를 1증가시킨 값을 넣습니다.
		
		while((i != 1) && (key > heap[i/2])){ 
			// i의 값이 1 과 같아지거나 key 값이 heap의 i/2 번째 항의 값보다 작을 때 까지 반복하는 반복분입니다.
			heap[i] = heap[i/2]; // heap 배열의 i번째 에 heap 의 i/2 번째에 넣어줍니다.
			i /= 2;
		}
		heap[i] = key;
	}
	public int delete(){
		int item,temp;
		int i = 1, j = 2;
		item = heap[1];
		temp = heap[numOfNode];
		numOfNode -= 1;
		while(j <= numOfNode){
			if(j < numOfNode){
				if(heap[j] < heap[j+1])
					j += 1;
			}
			if(temp >= heap[j]) break;
			heap[i] = heap[j];
			i = j;
			j = j*2;
		}
		heap[i] = temp;
		return item;
	}
	public void makeTreeHeap(){
		int i , p, j, temp;
		for(i = numOfNode ; i >= 1 ; i --){
			p = i;
			for(j = 2*p; j<= numOfNode; j = 2*j){
				if(j < numOfNode)
					if(heap[j] < heap[j+1])
						j += 1;
				if(heap[p] >= heap[j]) break;
				temp = heap[p];
				heap[p] = heap[j];
				heap[j] = temp;
				p = j;
			}
		}
	}
	
	public void testInsert(int key)
	{
		if((heap.length -1) == numOfNode)
			heapFull();
		heap[++numOfNode] = key;
	}
	
	public void print()
	{
		System.out.print("Heap Data : ");
		for(int i = 1 ; i <= numOfNode; i++)
			System.out.printf("| %2d |",heap[i]);
		System.out.println("\n");
			
	}
}
