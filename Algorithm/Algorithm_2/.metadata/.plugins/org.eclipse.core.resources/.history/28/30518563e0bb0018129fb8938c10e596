public class Week2 { //메인 클래스입니다.

	public static void main(String[] args){
		
		BTree root, leftTree, rightTree; //BTree형 객체 root, leftTree, rightTree를 생성합니다.
		
		leftTree = new BTree(new BTree(), 'A', new BTree()); 
		//leftTree에 BTree() (왼쪽 자식), A(부모) , BTree() (오른쪽 자식)이 삽입된 BTree()메서드를 넣습니다.

		rightTree = new BTree(new BTree(), 'B', new BTree());
		//rightTree에 BTree() (왼쪽 자식), B(부모) , BTree() (오른쪽 자식)이 삽입된 BTree()메서드를 넣습니다.
		root = new BTree(leftTree, '+', rightTree);
		//root에 leftTree(왼쪽 자식), +(부모), rightTree(오른쪽 자식)을 넣습니다.
		
		leftTree = root; //leftTree에 root를 넣습니다. ( + 의 부모)
		
		rightTree = new BTree(new BTree(), 'C', new BTree());
		//rightTree에  BTree() (왼쪽 자식), C(부모) , BTree() (오른쪽 자식)이 삽입된 BTree()메서드를 넣습니다.
		
		root = new BTree(leftTree, '*', rightTree);
		
		leftTree = root;
		rightTree = new BTree(new BTree(), 'D', new BTree());
		root = new BTree(leftTree, '/', rightTree);
		System.out.println("===Preorder Traversal===");
		root.preorder();
		
		System.out.println("\n\n===Inorder Traversal===");
		root.inorder();
		
		System.out.println("\n\n===postorder Traversal===");
		root.postorder();
		
		System.out.println("\n\n===iterative Preorder Traversal===");
		root.iterPreorder();
		
		System.out.println("\n\n===iterative Inorder Traversal===");
		root.iterInorder();
		
	}
}
